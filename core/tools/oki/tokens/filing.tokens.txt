     [java] 830 COPYRIGHT 2 osid.SidLicense
     [java] 872 ALWAYS_THROWS 0 osid.filing.FilingException
     [java] 851 API_PACKAGE 0 osid.filing
     [java] 852 IMPL_PACKAGE 0 osid.filing.skel
     [java] 836 MAKE_IMPL 0 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * The ByteStore is the fundamental interface of the Filing package.
     [java] 840 COMMENT 0   <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0    */
     [java] 111 API_INTERFACE 1 ByteStore
     [java] 120 EXTENDS 1 CabinetEntry
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Returns the length of this ByteStore
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return The length, in bytes, of this ByteStore
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException if an IO error occurs reading Object
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 long length()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Tests whether the Manager Owner may append to this ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return <code>true</code> if and only if the Manager Owner is
     [java] 840 COMMENT 0    *          allowed to append to this ByteStore,
     [java] 840 COMMENT 0    *          <code>false</code> otherwise.
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 boolean canAppend()
     [java] 840 COMMENT 0    /**
     [java] 840 COMMENT 0    * Marks this ByteStore so that only append operations are allowed.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void updateAppendOnly()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Gets the mime-type of this ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return the mime-type (Content-Type in a jar file manifest)
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 String getMimeType()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Set the mime-type of this ByteStore.
     [java] 840 COMMENT 0    * <p>Returns the actual mime-type set for the ByteStore.  This may
     [java] 840 COMMENT 0    * differ from the supplied mime-type for several reasons.  The
     [java] 840 COMMENT 0    * implementation may not support the setting of the mime-type, in
     [java] 840 COMMENT 0    * which case the default mime-type or one derived from the content
     [java] 840 COMMENT 0    * bytes or file extension may be used.  Or a canonical, IANA
     [java] 840 COMMENT 0    * mime-type (see
     [java] 840 COMMENT 0    * <a href="http://www.iana.org/assignments/media-types/index.html">http://www.iana.org/assignments/media-types/index.html</a>)
     [java] 840 COMMENT 0    * may be substituted for a vendor or experimental type.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param mimeType
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return String
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 String updateMimeType(String mimeType)
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0    * Tests whether the Manager Owner may read this CabinetEntry.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return <code>true</code> if and only if this CabinetEntry can be
     [java] 840 COMMENT 0    *          read by the Manager Owner, <code>false</code> otherwise
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 boolean isReadable()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Tests whether the Manager Owner may modify this CabinetEntry.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return <code>true</code> if and only if the Manager Owner is
     [java] 840 COMMENT 0    *          allowed to write to this CabinetEntry,
     [java] 840 COMMENT 0    *          <code>false</code> otherwise.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 boolean isWritable()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Marks this ByteStore so that only read operations are allowed.
     [java] 840 COMMENT 0    * After invoking this method this ByteStore is guaranteed not to
     [java] 840 COMMENT 0    * change until it is either deleted or marked to allow write
     [java] 840 COMMENT 0    * access.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * Note that whether or not a read-only ByteStore may be deleted
     [java] 840 COMMENT 0    * depends upon the file system underlying the implementation.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void updateReadOnly()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Marks this Cabinet so that write operations are allowed.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void updateWritable()
     [java] 840 COMMENT 0  /**
     [java] 840 COMMENT 0    * Returns the Digest of this ByteStore using the specified algorithm used,
     [java] 840 COMMENT 0    * such as md5 or crc.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param algorithmType digestAlgorithmType selected from possible implementation digest algorithm types.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return String digest or null if digest is not supported for this ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 String getDigest(osid.shared.Type algorithmType)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Returns the Digest algorithm types supported by the implementation, such as md5 or crc.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return osid.shared.TypeIterator the digest algorithm types supported by this implementation.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 osid.shared.TypeIterator getDigestAlgorithmTypes()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Reads the data.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return osid.shared.ByteValueIterator
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 osid.shared.ByteValueIterator read(java.util.Calendar version)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Writes b.length bytes to this ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void write(byte[] b)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Writes <code>len</code> bytes from the specified byte array starting at
     [java] 840 COMMENT 0    * offset <code>off</code> to this ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void writeBytesAtOffset(byte[] b, int off, int len)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Writes the specified byte to this ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void writeByte(int b)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Closes this Output Object and releases any system resources
     [java] 840 COMMENT 0    * associated with it.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void commit()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Cabinets contain other Cabinets and ByteStores, and have
     [java] 840 COMMENT 0    * implementation-dependent properties.
     [java] 840 COMMENT 0    * <p>
     [java] 840 COMMENT 0    * They may manage quotas, that is, if the implementation supports
     [java] 840 COMMENT 0    * quotas, each Agent may be assigned a quota of space used in the
     [java] 840 COMMENT 0    * Cabinet.
     [java] 840 COMMENT 0    * <p>
     [java] 840 COMMENT 0    * Cabinets contain CabinetEntries, each of which may be a ByteStore or a
     [java] 840 COMMENT 0    * Cabinet.  They are known by their IDs and name, where
     [java] 840 COMMENT 0    * the name is a string which does not include the
     [java] 840 COMMENT 0    * implementation-dependent separationCharacter, and may represent a filename.
     [java] 840 COMMENT 0    * <p>
     [java] 840 COMMENT 0    * ByteStores and Cabinets are added to Cabinets. Cabinets are created
     [java] 840 COMMENT 0    * in CabinetFactories or Cabinets, and ByteStores are created in Cabinets.
     [java] 840 COMMENT 0   <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0    */
     [java] 111 API_INTERFACE 1 Cabinet
     [java] 120 EXTENDS 1 CabinetEntry
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Method getProperties
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * Return properties of this cabinet.  The property map is
     [java] 840 COMMENT 0    * specified using keys of osid.shared.Type, and values of
     [java] 840 COMMENT 0    * e.g. Boolean, Long, or Double.  The application prepares a map of
     [java] 840 COMMENT 0    * desired qualities, e.g.<br />
     [java] 840 COMMENT 0    <code>
     [java] 840 COMMENT 0    * key = new Type("Filing", "MIT", "supportsQuota"),
     [java] 840 COMMENT 0    *    value = new Boolean(true)<br />
     [java] 840 COMMENT 0    * key = new Type("Filing", "MIT", "supportsReplication"),
     [java] 840 COMMENT 0    *    value = new Boolean(true)<br />
     [java] 840 COMMENT 0    * key = new Type("Filing", "MIT", "minimumReplications"),
     [java] 840 COMMENT 0    * value = new Integer(2)
     [java] 840 COMMENT 0    </code>
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return java.util.Map of properties of this Cabinet and implementation
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 java.util.Map getProperties()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Create a new ByteStore and add it to this Cabinet under the given
     [java] 840 COMMENT 0    * name.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * The name must not include this Cabinet's separationCharacter.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param displayName  The name to be used
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return  The ByteStore created
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#ITEM_ALREADY_EXISTS ITEM_ALREADY_EXISTS}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 ByteStore createByteStore(String displayName)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Create a new Cabinet and add it to this Cabinet under the given
     [java] 840 COMMENT 0    * name.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * The name must not include this Cabinet's separationCharacter.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param displayName  The name to be used
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return  The Cabinet created
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#ITEM_ALREADY_EXISTS ITEM_ALREADY_EXISTS}, {@link osid.filing.FilingException#NAME_CONTAINS_ILLEGAL_CHARS NAME_CONTAINS_ILLEGAL_CHARS}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 Cabinet createCabinet(String displayName)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Copy an existing ByteStore in this Cabinet by copying contents and
     [java] 840 COMMENT 0    * the appropriate attributes of another ByteStore.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param displayName
     [java] 840 COMMENT 0    * @param oldByteStore
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return ByteStore
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#ITEM_ALREADY_EXISTS ITEM_ALREADY_EXISTS}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 ByteStore copyByteStore(String displayName, ByteStore oldByteStore)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Add a CabinetEntry, it must be from same Manager.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param entry
     [java] 840 COMMENT 0    * @param displayName
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#NAME_CONTAINS_ILLEGAL_CHARS NAME_CONTAINS_ILLEGAL_CHARS}, {@link osid.filing.FilingException#ITEM_ALREADY_EXISTS ITEM_ALREADY_EXISTS}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void add(CabinetEntry entry, String displayName)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Remove a CabinetEntry. Does not destroy the CabinetEntry.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param entry
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void remove(CabinetEntry entry)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get a CabinetEntry from a Cabinet by its ID.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param id
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return CabinetEntry which has given ID.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR},{@link osid.filing.FilingException#ITEM_DOES_NOT_EXIST ITEM_DOES_NOT_EXIST}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 CabinetEntry getCabinetEntryById(osid.shared.Id id)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get a CabinetEntry by name.  Not all CabinetEntrys have names,
     [java] 840 COMMENT 0    * but if it has a name, the name is unique within a Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param displayName
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return CabinetEntry which has given name
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#DELETE_FAILED DELETE_FAILED}, {@link osid.filing.FilingException#ITEM_DOES_NOT_EXIST ITEM_DOES_NOT_EXIST}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 CabinetEntry getCabinetEntryByName(String displayName)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get an Iterator over all CabinetEntries in this Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return CabinetEntryIterator
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 CabinetEntryIterator entries()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Return the root Cabinet of this Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return root Cabinet
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 Cabinet getRootCabinet()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Return true if this Cabinet is the root Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return true if and only if this Cabinet is the root Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 boolean isRootCabinet()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Return true if this Cabinet can list its entries.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return true if and only if this Cabinet can list its entries.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 boolean isListable()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Return true if this Cabinet allows entries to be added or removed.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return true if and only if this Cabinet allows entries to be added or removed.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 boolean isManageable()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get space available in Cabinet, for bytes.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return long Space available in this Cabinet, in bytes.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 long getAvailableBytes()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get number of bytes used in this Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return long Space used in this Cabinet, in bytes.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 long getUsedBytes()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * An entry in a Cabinet, a CabinetEntry is either a ByteStore or a Cabinet. CabinetEntry contains information common to both Cabinets and Bytestores
     [java] 840 COMMENT 0    <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0    */
     [java] 111 API_INTERFACE 1 CabinetEntry
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Returns the Cabinet in which this CabinetEntry is an entry, or null if it has
     [java] 840 COMMENT 0    * no parent (for example is the root Cabinet).
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return Cabinet the parent Cabinet of this entry, or null if it has
     [java] 840 COMMENT 0    * no parent (e.g. is the root Cabinet)
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 Cabinet getParent()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Return the name of this CabinetEntry in its parent Cabinet.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return name
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 String getDisplayName()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get Id of this CabinetEntry
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return Id
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 osid.shared.Id getId()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Returns when this Cabinet was last modified.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return  java.util.Calendar The time this cabinet was last modified
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0   */
     [java] 220 METHOD 1 java.util.Calendar getLastModifiedTime()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Returns all the times that this Cabinet was modified.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return  osid.shared.CalendarInterator The times this cabinet was modified
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0   */
     [java] 220 METHOD 1 osid.shared.CalendarIterator getAllModifiedTimes()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Sets the last-modified time to the current time for this CabinetEntry.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void touch()
     [java] 840 COMMENT 0    /**
     [java] 840 COMMENT 0    * Returns when this Cabinet was last accessed.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * Not all implementations will record last access times accurately,
     [java] 840 COMMENT 0    * due to caching and for performance.  The value returned will be
     [java] 840 COMMENT 0    * at least the last modified time, the actual time when a read was
     [java] 840 COMMENT 0    * performed may be later.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return  java.util.Calendar The time the file was last accessed.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 java.util.Calendar getLastAccessedTime()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Returns when this CabinetEntry was created.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * Not all implementations will record the time of creation
     [java] 840 COMMENT 0    * accurately.  The value returned will be at least the last
     [java] 840 COMMENT 0    * modified time, the actual creation time may be earlier.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return java.util.Calendar The time the file was created
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 java.util.Calendar getCreatedTime()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Return the Agent that owns this CabinetEntry.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return osid.shared.Agent
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 osid.shared.Agent getCabinetEntryAgent()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Change the name of this entry to <code>displayName</code>
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param displayName the new name for the entry
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void updateDisplayName(String displayName)
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0     * The FilingManager provides a service for creating a Root Cabinet and
     [java] 840 COMMENT 0     * getting ByteStores and Cabinets. Refer to the OsidLoader for more
     [java] 840 COMMENT 0     * information on Managers.
     [java] 840 COMMENT 0     * <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0     *
     [java] 840 COMMENT 0     * @see osid.OsidLoader
     [java] 840 COMMENT 0     * @see osid.OsidManager
     [java] 840 COMMENT 0     *
     [java] 840 COMMENT 0     */
     [java] 111 API_INTERFACE 1 FilingManager
     [java] 120 EXTENDS 1 osid.OsidManager
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * List all the root Cabinets currently available in this Manager.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return CabinetEntryIterator
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 CabinetEntryIterator listRoots()
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Get a CabinetEntry by ID.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param id
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @return CabinetEntry with a given ID
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#ITEM_DOES_NOT_EXIST ITEM_DOES_NOT_EXIST}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 CabinetEntry getCabinetEntry(osid.shared.Id id)
     [java] 840 COMMENT 0   /**
     [java] 840 COMMENT 0    * Deletes this CabinetEntry.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * If the CabinetEntry is a Cabinet it must be empty, and the Owner of
     [java] 840 COMMENT 0    * the Manager must have sufficient permissions to perform this action.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @param cabinetEntryId id is the CabinetEntry's id.
     [java] 840 COMMENT 0    *
     [java] 840 COMMENT 0    * @throws osid.filing.FilingException An exception with one of the following messages defined in osid.filing.FilingException may be thrown: {@link osid.filing.FilingException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.filing.FilingException#IO_ERROR IO_ERROR}, {@link osid.filing.FilingException#DELETE_FAILED DELETE_FAILED}, {@link osid.filing.FilingException#CABINET_NOT_EMPTY CABINET_NOT_EMPTY}, {@link osid.filing.FilingException#ITEM_DOES_NOT_EXIST ITEM_DOES_NOT_EXIST}
     [java] 840 COMMENT 0    */
     [java] 220 METHOD 1 void delete(osid.shared.Id cabinetEntryId)
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     * CabinetEntryIterator is the iterator for a collection of CabinetEntries.
     [java] 840 COMMENT 0     * <p>
     [java] 840 COMMENT 0     * OSID provides a set of iterator interfaces for base types.  The purpose of these iterators is to offer
     [java] 840 COMMENT 0     * a way for SID methods to return multiple values of a common type while avoiding the use arrays.  Returning an
     [java] 840 COMMENT 0     * array may not be appropriate if the number of values returned is large or if the array is fetched remotely.
     [java] 840 COMMENT 0     * <p>
     [java] 840 COMMENT 0     * Note that iterators do not allow access to values by index; you must access values sequentially.
     [java] 840 COMMENT 0     * There is no way to go backwards through the sequence.
     [java] 840 COMMENT 0     * <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0     * @see CabinetEntry
     [java] 840 COMMENT 0     * @see osid.OsidManager
     [java] 840 COMMENT 0     */
     [java] 111 API_INTERFACE 1 CabinetEntryIterator
     [java] 840 COMMENT 0    /**
     [java] 840 COMMENT 0     * Method hasNext
     [java] 840 COMMENT 0     *
     [java] 840 COMMENT 0     * @return boolean
     [java] 840 COMMENT 0     *
     [java] 840 COMMENT 0     * @throws osid.filing.FilingException
     [java] 840 COMMENT 0     */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     *    Returns the next CabinetEntry in the collection.
     [java] 840 COMMENT 0     *
     [java] 840 COMMENT 0     *    @return CabinetEntry
     [java] 840 COMMENT 0     *
     [java] 840 COMMENT 0     * @throws osid.filing.FilingException
     [java] 840 COMMENT 0     */
     [java] 220 METHOD 1 CabinetEntry next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     All methods of all interfaces of the Open Service Interface Definition (OSID) throw a subclass of osid.OsidException. This requires the caller of an osid package method handle the OsidException. Since the application using an osid manager can not determine where the manager will ultimately execute, it must assume a worst case scenario and protect itself.
     [java] 840 COMMENT 0     <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0     */
     [java] 100 CLASS 1 FilingException
     [java] 120 EXTENDS 1 osid.OsidException
     [java] 123 THROWS_NOTHING 1 null
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Selected item already exists
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String ITEM_ALREADY_EXISTS = "Selected item already exists";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Selected item does not exist
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String ITEM_DOES_NOT_EXIST = "Selected item does not exist";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Unsupported operation
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String UNSUPPORTED_OPERATION = "Unsupported operation";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     IO error
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String IO_ERROR = "IO error";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Unsupported CabinetEntry Type
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String UNSUPPORTED_TYPE = "Unsupported CabinetEntry Type";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Cabinet is not empty
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String CABINET_NOT_EMPTY = "Cabinet is not empty";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Object is not a Cabinet
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String NOT_A_CABINET = "Object is not a Cabinet";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Object is not a ByteStore
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String NOT_A_BYTESTORE = "Object is not a ByteStore";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Name contains illegal characters
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String NAME_CONTAINS_ILLEGAL_CHARS = "Name contains illegal characters";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Owner is null
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String NULL_OWNER = "Owner is null";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Delete failed
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public final static String DELETE_FAILED = "Delete failed";
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Operation failed
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String OPERATION_FAILED = "Operation failed"
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Iterator has no more elements
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String NO_MORE_ITERATOR_ELEMENTS = "Iterator has no more elements"
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Unimplemented method
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String UNIMPLEMENTED = "Unimplemented method "
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Permission denied
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String PERMISSION_DENIED = "Permission denied"
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Null argument
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String NULL_ARGUMENT = "Null argument"
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Configuration error
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String CONFIGURATION_ERROR = "Configuration error"
     [java] 840 COMMENT 0     /**
     [java] 840 COMMENT 0     Can't delete root Cabinet
     [java] 840 COMMENT 0     */
     [java] 150 DECLARE 1 public static final String CANNOT_DELETE_ROOT_CABINET = "Cannot delete root Cabinet"
     [java] 200 CONSTRUCTOR 1 String message
     [java] 201 CONSTRUCTOR_LINE 1 super( message );
     [java] 823 END 1 null
