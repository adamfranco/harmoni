     [java] 830 COPYRIGHT 2 osid.SidLicense
     [java] 851 API_PACKAGE 0 osid.shared
     [java] 852 IMPL_PACKAGE 0 osid.shared.skel
     [java] 836 MAKE_IMPL 0 null
     [java] 872 ALWAYS_THROWS 0 osid.shared.SharedException
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 SharedManager creates, deletes, and gets Agents and Groups and creates and gets Ids.  Group subclasses Agent and Groups may contain other Groups as well as Agents.  Note that this implementation uses a serialization approach that is simple rather than scalable.  Agents, Groups, and Ids are all lumped together into a single Vector that gets serialized.  The SharedManager interface provides for the creation, removal, and return of a variety of basic O.K.I.  objects.  Agents, Groups which extend Agents, and Ids are used in many different contexts throughout the OSIDs.  As with other Managers, use the OsidLoader to load an implementation of this interface.  All implementors of OsidManager provide create, delete, and get methods for the various objects defined in the package.  Most managers also include methods for returning Types.  We use create methods in place of the new operator.  Create method implementations should both instantiate and persist objects.  The reason we avoid the new operator is that it makes the name of the implementing package explicit and requires a source code change in order to use a different package name. In combination with OsidLoader, applications developed using managers permit implementation substitution without source code changes.   <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 SharedManager
     [java] 120 EXTENDS 1 osid.OsidManager
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Create an Agent with the display name and Type specified.  Both are immutable.
     [java] 840 COMMENT 0 @param displayName
     [java] 840 COMMENT 0 @param agentType
     [java] 840 COMMENT 0 @return Agent
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_TYPE UNKNOWN_TYPE}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Agent createAgent(String displayName, Type agentType)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Delete the Agent with the specified Unique Id.
     [java] 840 COMMENT 0 @param id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_ID UNKNOWN_ID}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public void deleteAgent(Id id)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Agent with the specified Unique Id. Getting an Agent by name is not supported since names are not guaranteed to be unique.
     [java] 840 COMMENT 0 @param id
     [java] 840 COMMENT 0 @return Agent
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_ID UNKNOWN_ID}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Agent getAgent(Id id)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return an iterator containing all the Agents.  An iterator provides access to the Agents one at a time.  Iterators have a method hasNext() which returns <code>true</code> if there are more Agents available and a method next() which returns the next Agent.
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public AgentIterator getAgents()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return an iterator containing all the Agent Types.  An iterator provides access to the Agent Types from this implementation one at a time.  Iterators have a method hasNext() which returns true if there are more Agent Types available and a method next() which returns the next Agent Type.
     [java] 840 COMMENT 0 @return TypeIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public TypeIterator getAgentTypes()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Create a Group with the display name and Type specified.  Both are immutable.
     [java] 840 COMMENT 0 @param displayName
     [java] 840 COMMENT 0 @param groupType
     [java] 840 COMMENT 0 @param description
     [java] 840 COMMENT 0 @return Group
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_TYPE UNKNOWN_TYPE}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Group createGroup(String displayName, Type groupType, String description)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Delete the Group with the specified Unique Id.
     [java] 840 COMMENT 0 @param id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_ID UNKNOWN_ID}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public void deleteGroup(Id id)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Gets the Group with the specified Unique Id. Getting a Group by name is not supported since names are not guaranteed to be unique.
     [java] 840 COMMENT 0 @param id
     [java] 840 COMMENT 0 @return Group
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_ID UNKNOWN_ID}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Group getGroup(Id id)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Groups.  Note since Groups subclass Agents, we are returning an AgentIterator and there is no GroupIterator. An iterator provides access to the Groups one at a time.  Iterators have a method hasNext() which returns true if there are more Groups available and a method next() which returns the next Group.
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public AgentIterator getGroups()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return an iterator containing all the Group Types.  An iterator provides access to the Group Types from this implementation one at a time.  Iterators have a method hasNext() which returns true if there are more Group Types available and a method next() which returns the next Group Type.
     [java] 840 COMMENT 0 @return TypeIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public TypeIterator getGroupTypes()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Create a new unique identifier.
     [java] 840 COMMENT 0 @return Id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Id createId()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Unique Id with this String representation or create a new Unique Id with this representation.
     [java] 840 COMMENT 0 @param idString
     [java] 840 COMMENT 0 @return Id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Id getId(String idString)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Agents of the specified Type.
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_TYPE UNKNOWN_TYPE}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 AgentIterator getAgentsByType(osid.shared.Type agentType)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Groups of the specified Type.
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_TYPE UNKNOWN_TYPE}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 AgentIterator getGroupsByType(osid.shared.Type groupType)
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Agents are an abstraction for a principal or group.  The Agent may be granted authorization to perform specific functions.  Agents are created through implementations of osid.shared.SharedManager and have an immutable name, Type, and Unique Id. <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 Agent
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the name of this Agent.
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public String getDisplayName()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the id of this Agent.
     [java] 840 COMMENT 0 @return id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public osid.shared.Id getId()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the type of this Agent.
     [java] 840 COMMENT 0 @return Type
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public osid.shared.Type getType()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Properties associated with this Agent.
     [java] 840 COMMENT 0 @return PropertiesIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 PropertiesIterator getProperties()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Properties of this Type associated with this Agent.
     [java] 840 COMMENT 0 @return Properties
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}, {@link osid.shared.SharedException#UNKNOWN_TYPE UNKNOWN_TYPE}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Properties getPropertiesByType(Type propertiesType)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Properties Types supported by the implementation.
     [java] 840 COMMENT 0 @return TypeIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 TypeIterator getPropertiesTypes()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Properties is a mechanism for returning read-only data about an Agent.  Each Agent can have data associated with a PropertiesType.  For each PropertiesType, there are Properties which are Serializable values identified by a key.  <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 Properties
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Type associated with these Properties. Properties
     [java] 840 COMMENT 0 @return Type
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Type getType()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Property associated with this key.
     [java] 840 COMMENT 0 @return java.io.Serializable
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#UNKNOWN_KEY UNKNOWN_KEY}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 java.io.Serializable getProperty(java.io.Serializable key)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Keys associated with these Properties.
     [java] 840 COMMENT 0 @return ObjectIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 SerializableObjectIterator getKeys()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0     The Group may contain Members (Agents) as well as other Groups.  There are management methods for adding, removing, and getting members and Groups.  There are also methods for testing if a Group or member is contained in a Group, and returning all Members in a Group, all Groups in a Group, or all Groups containing a specific Member. Many methods include an argument that specifies whether to include all subgroups or not.  This allows for more flexible maintenance and interrogation of the structure. Note that there is no specification for persisting the Group or its content -- this detail is left to the implementation. <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 Group
     [java] 120 EXTENDS 1 Agent
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the DisplayName of this Group as stored.
     [java] 840 COMMENT 0 @return the String
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public String getDisplayName()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Description of this Group as stored.
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 230 GET 1 String Description
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Update the Description of this Group as stored.
     [java] 840 COMMENT 0 @param description
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 234 UPDATE 1 String Description
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the Unique Id of this Group as stored.
     [java] 840 COMMENT 0 @return Id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 230 GET 1 Id Id
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Update the Type of this Group as stored.
     [java] 840 COMMENT 0 @return Type
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public osid.shared.Type getType()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Add an Agent member or a Group to this Group.  The Member or Group will not be added if it already exists in the group.
     [java] 840 COMMENT 0 @param memberOrGroup
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#ALREADY_ADDED ALREADY_ADDED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 void add(Agent memberOrGroup)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Remove an Agent member or a Group from this Group. If the Member or Group is not in the group no action is taken and no exception is thrown.
     [java] 840 COMMENT 0 @param memberOrGroup
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#UNKNOWN_ID UNKNOWN_ID}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 void remove(Agent memberOrGroup)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Members of this group and optionally all the Members from all subgroups. Duplicates are not returned.
     [java] 840 COMMENT 0 @param includeSubgroups
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 AgentIterator getMembers(boolean includeSubgroups)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Groups in this group and optionally all the subgroups in this group. Note since Groups subclass Agents, we are returning an AgentIterator and there is no GroupIterator.
     [java] 840 COMMENT 0 @param includeSubgroups
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 AgentIterator getGroups(boolean includeSubgroups)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get all the Groups, including subgroups, containing the Member. Note since Groups subclass Agents, we are returning an AgentIterator and there is no GroupIterator.
     [java] 840 COMMENT 0 @param member
     [java] 840 COMMENT 0 @return AgentIterator
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 AgentIterator getGroupsContainingMember(Agent member)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if the Member or Group is in the Group, optionally including subgroups, <code>false</code> otherwise.
     [java] 840 COMMENT 0 @param memberOrGroup
     [java] 840 COMMENT 0 @param searchSubgroups
     [java] 840 COMMENT 0 @return boolean
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean contains(Agent memberOrGroup , boolean searchSubgroups)
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0  The Type class captures the fundamental concept of categorizing an object.  Type are designed to be shared among various SIDs and Managers.  The exact meaning of a particular type is left to the developers who use a given Type subclass.  The form of the Type class enables categorization. There are four Strings that make up the Type class: authority, domain, keyword, and description.  The first three of these Strings are used by the isEqual method to determine if two instance of the Type class are equal.  The fourth String, description, is used to clarify the semantic meaning of the instance.<p>An example of a FunctionType instance:<p><br>  - authority is "higher ed"<br>  - domain is "authorization"<br>  - keyword is "writing checks"<br>  - description is "This is the FunctionType for writing checks"<p>This Type could be used with the authorization SID.  It could also be used with the dictionary SID to determine the text to display for a given locale (for example, CANADA_FRENCH).  The dictionary SID could use the FunctionType instance as a key to find the display text, but it could also use just the keyword string from the FunctionType as a key.  By using the keyword the same display text could then be used for other FunctionTypes such as: <br>  - authority is "mit"<br>  - domain is "accounting"<br>  - keyword is "writing checks"<br>  - description is "A/P check writing type"<br>An instance of the Type class can be used in a variety of ways to categorize information either as a complete object or as one of its parts (ie authority, domain, keyword). <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 101 ABSTRACT_CLASS 1 Type
     [java] 121 IMPLEMENTS 1 java.io.Serializable
     [java] 123 THROWS_NOTHING 1 null
     [java] 150 DECLARE 1 private String domain
     [java] 150 DECLARE 1 private String authority
     [java] 150 DECLARE 1 private String keyword
     [java] 150 DECLARE 1 private String description
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Construct a Type object for this domain, authority and keyword.
     [java] 840 COMMENT 0 @param domain
     [java] 840 COMMENT 0 @param authority
     [java] 840 COMMENT 0 @param keyword
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Type(String domain, String authority, String keyword)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Construct a Type object for this domain, authority, keyword, and description.
     [java] 840 COMMENT 0 @param domain
     [java] 840 COMMENT 0 @param authority
     [java] 840 COMMENT 0 @param keyword
     [java] 840 COMMENT 0 @param description
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public Type(String domain, String authority, String keyword, String description)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Compare the specified Type with this Type for equality.<p>Two Types are equal if the domain, authority and keyword are equal.
     [java] 840 COMMENT 0 @param type2
     [java] 840 COMMENT 0 @return boolean
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public final boolean isEqual(Type type2)
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the domain part of this Type.  The domain is a String representing the domain which
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public final String getDomain()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get the authority part of this Type.<p>The authority is a String representing the naming authority which gives meaning to the keyword, representing the vocabulary defining the keyword, or equivalent function.
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public final String getAuthority()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the keyword part of the Type.<p>The keyword is a String uniquely defining this Type within the scope of the authority.
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public final String getKeyword()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Get description part of the Type.<p>The description is a String which further qualifies this instance of a Type.  Two Types which differ only by description are still identical.
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 public final String getDescription()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Id creates and manages unique identifiers.  The identifier is created with createId().  A String representation of the identifier is available with getIdString().  To convert from a String to the identifier, use getId(String). <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 Id
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the String representation of this Unique Id.
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 String getIdString()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Tests if an Unique Id equals this Unique Id.
     [java] 840 COMMENT 0 @param id
     [java] 840 COMMENT 0 @return boolean
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NULL_ARGUMENT NULL_ARGUMENT}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean isEqual(osid.shared.Id id)
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 AgentIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 AgentIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Agents; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Agents; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Agent.
     [java] 840 COMMENT 0 @return Agent
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Agent next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 PropertiesIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 PropertiesIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Properties; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Properties; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Properties.
     [java] 840 COMMENT 0 @return Properties
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Properties next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 TypeIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 TypeIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Types; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Types; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Type
     [java] 840 COMMENT 0 @return Type
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Type next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 IdIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 IdIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Ids; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Ids; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Id
     [java] 840 COMMENT 0 @return Id
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Id next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Stringiterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 StringIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Strings; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Strings; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next String
     [java] 840 COMMENT 0 @return String
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 String next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 IntValueIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 IntValueIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional ints; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional ints; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next int
     [java] 840 COMMENT 0 @return int
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 int next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 ByteValueIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 ByteValueIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional bytes; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional bytes; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next byte
     [java] 840 COMMENT 0 @return byte
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 byte next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 CharValueIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 CharValueIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional chars; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional chars; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next char
     [java] 840 COMMENT 0 @return char
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 char next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 ObjectIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 ObjectIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Objects; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Objects; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Object
     [java] 840 COMMENT 0 @return object
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 Object next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 CalendarIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 CalendarIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Calendars; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Calendars; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Calendar
     [java] 840 COMMENT 0 @return next Calendar
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 java.util.Calendar next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 SerializableObjectIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.  To maximize reuse and implementation substitutability, it is important not to reference a class in one OSID implementation directly in another.  Interfaces should be used and new called only on objects in the implementation package.  To avoid binding a specific implementation of Shared to a specific implementaiton of some other OSID, implementations TypeIterator and the other primitative-type Iterators should reside in each OSID that requires them and not in an implementation of Shared.  For example, if an implementation of osid.logging.LoggingManager needs a class that implements osid.shared.StringIterator, the class should be in the package implementing Logging.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 111 API_INTERFACE 1 SerializableObjectIterator
     [java] 120 EXTENDS 1 java.io.Serializable
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Objects; <code>false</code> otherwise.
     [java] 840 COMMENT 0 Return <code>true</code> if there are additional Object; <code>false</code> otherwise.
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 boolean hasNext()
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Return the next Object
     [java] 840 COMMENT 0 @return next Object
     [java] 840 COMMENT 0 @throws osid.shared.SharedException An exception with one of the following messages defined in osid.shared.SharedException:  {@link osid.shared.SharedException#OPERATION_FAILED OPERATION_FAILED}, {@link osid.shared.SharedException#PERMISSION_DENIED PERMISSION_DENIED}, {@link osid.shared.SharedException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link osid.shared.SharedException#UNIMPLEMENTED UNIMPLEMENTED}, {@link osid.shared.SharedException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
     [java] 840 COMMENT 0 */
     [java] 220 METHOD 1 java.io.Serializable next()
     [java] 823 END 1 null
     [java] 822 BEGIN 0 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 All methods of all interfaces of the Open Service Interface Definition (OSID) throw a subclass of osid.OsidException. This requires the caller of an osid package method handle the OsidException. Since the application using an OsidManager can not determine where the implementation will ultimately execute, it must assume a worst case scenario and protect itself.
     [java] 840 COMMENT 0 <p>Licensed under the {@link osid.SidLicense MIT O.K.I&#46; SID Definition License}. <p>SID Version: 1.0 rc6
     [java] 840 COMMENT 0 */
     [java] 100 CLASS 1 SharedException
     [java] 120 EXTENDS 1 osid.OsidException
     [java] 123 THROWS_NOTHING 1 null
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Unknown Id
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String UNKNOWN_ID = "Unknown Id "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Unknown or unsupported Type
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String UNKNOWN_TYPE = "Unknown Type "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Operation failed
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String OPERATION_FAILED = "Operation failed "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Iterator has no more elements
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String NO_MORE_ITERATOR_ELEMENTS = "Iterator has no more elements "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Circular operation
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String CIRCULAR_OPERATION = "Circular operation not allowed "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Null argument
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String NULL_ARGUMENT = "Null argument "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Permission denied
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String PERMISSION_DENIED = "Permission denied "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Object already added
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String ALREADY_ADDED = "Object already added "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Configuration error
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String CONFIGURATION_ERROR = "Configuration error "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Unimplemented method
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String UNIMPLEMENTED = "Unimplemented method "
     [java] 840 COMMENT 0 /**
     [java] 840 COMMENT 0 Unknown key
     [java] 840 COMMENT 0 */
     [java] 150 DECLARE 1 public static final String UNKNOWN_KEY = "Unknown key "
     [java] 200 CONSTRUCTOR 1 String message
     [java] 201 CONSTRUCTOR_LINE 1 super(message);
     [java] 823 END 1 null
