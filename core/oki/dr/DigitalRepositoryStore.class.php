<?//require_once(HARMONI."/oki/dr/HarmoniDigitalRepository.interface.php");Services::requireService("DBHandler","DBHandler");Services::requireService("Shared","HarmoniSharedManager");class DigitalRepositoryStore{		/**	 * @var array $_infoStructures The InfoStructure objects referenced in the DR.	 */	var $_infoStructures = array();	/**	 * @var array $_infoParts The InfoPart objects referenced in the DR.	 */	var $_infoParts = array();	/**	 * @var array $_assets The asset objects referenced in the DR.	 */	var $_assets = array();	/**	 * @var array $_infoRecords The InfoRecord objects referenced in the DR.	 */	var $_infoRecords = array();	/**	 * @var array $_infoFields The InfoField objects referenced in the DR.	 */	var $_infoFields = array();		/**	 * @var object DatabaseAuthorizationContextHierarchy $_hierarchy The hierarchy for this DR.	 */	var $_hierarchy = NULL;		/**	 * @var integer $_dbIndex The index of the database from which to fetch the hierarchy and data.	 */	var $_dbIndex = 0;	/**	 * @var integer $_id The id of the dr.	 */	var $_id = 0;		/**	 * @var string $_displayName The displayName of this DR.	 */	var $_displayName;		/**	 * @var string $_description The description of this DR.	 */	var $_description;		/**	 * @var object $_type The type of this DR.	 */	var $_type;	/**	 * Get the name for this DigitalRepository.	 * @return String the name	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function getDisplayName() { 		return $this->_drStore->getDisplayName();	}	/**	 * Update the name for this DigitalRepository.	 * @param displayName	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}, {@link DigitalRepositoryException#NULL_ARGUMENT NULL_ARGUMENT}	 * @package osid.dr	 */	function updateDisplayName($displayName) { 		$this->_drStore->updateDisplayName($displayName);	}	/**	 * Get the description for this DigitalRepository.	 * @return String the name	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function getDescription() {		return $this->_drStore->getDescription();	}	/**	 * Update the description for this DigitalRepository.	 * @param description	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}, {@link DigitalRepositoryException#NULL_ARGUMENT NULL_ARGUMENT}	 * @package osid.dr	 */	function updateDescription($description) { 		$this->_drStore->updateDescription($description);	}	/**	 * Get the Unique Id for this DigitalRepository.	 * @return osid.shared.Id Unique Id this is usually set by a create method's implementation	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function & getId() {		return $this->_drStore->getId();	}	/**	 * Get the the DigitalRepositoryType of this DigitalRepository.	 * @return osid.shared.Type	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function & getType() {		return $this->_drStore->getType();	}	/**	 * Saves this object to persistable storage.	 * @access protected	 */	function save () {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	 	/**	 * Loads this object from persistable storage.	 * @access protected	 */	function load () {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	?>