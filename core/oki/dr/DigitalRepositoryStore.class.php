<?//require_once(HARMONI."/oki/dr/HarmoniDigitalRepository.interface.php");Services::requireService("DBHandler","DBHandler");Services::requireService("Shared","HarmoniSharedManager");class DigitalRepositoryStore{		/**	 * @var array $_objects The objects referenced in the DR.	 * 						This includes Assets, InfoStructures, Info parts,	 *						InfoRecords, and InfoFields. All are indexed by id.	 */	var $_objects = array();	/**	 * @var array $_data The data for objects referenced in the DR.	 */	var $_data = array();		/**	 * @var array $_changed The ids of objects that have been modified since they were 	 *						loaded from persistable storage.	 */	var $_changed = array();		/**	 * @var object DatabaseAuthorizationContextHierarchy $_hierarchy The hierarchy for 	 * 						this DR.	 */	var $_hierarchy = NULL;	/**	 * @var object DatabaseAuthorizationContextHierarchy $_infoHierarchy The hierarchy 	 * 						that stores the hierarchical structure of InfoParts and 	 * 						InfoStructures.	 */	var $_infoHierarchy = NULL;		/**	 * @var integer $_dbIndex The index of the database from which to fetch the hierarchy	 * 						and data.	 */	var $_dbIndex = 0;	/**	 * @var integer $_id The id of the dr.	 */	var $_id = 0;		/**	 * @var string $_displayName The displayName of this DR.	 */	var $_displayName = NULL;		/**	 * @var string $_description The description of this DR.	 */	var $_description = NULL;		/**	 * @var object $_type The type of this DR.	 */	var $_type;		/**	 * @var boolean $_isChanged True if the displayName, description, or type has been	 * 						modified since the dr was loaded from persistable storage.	 */	var $_isChanged = FALSE;	/**	 * Constructor. Creates the store and loads persistable data for it.	 *	 * @param object Id $id  The Id of the dr.	 * @param integer $dbIndex The index of the database which holds this dr.	 */	function DigitalRepositoryStore (& $id, $dbIndex) {		// Check the arguments		ArgumentValidator::validate($id, new ExtendsValidatorRule("Id"));		ArgumentValidator::validate($dbIndex, new IntegerValidatorRule);				$idString = $id->getIdString();		$this->_id = $idString;		$this->_dbIndex = $dbIndex;				// Load the data for this DR if it is in the database.		$dbc =& Services::getService("DBHandler");		$query =& new SelectQuery;				$query->addColumn("dr.display_name");		$query->addColumn("dr.description");		$query->setWhere("dr.id=".$this->_id);		$result =& $dbc->query($query, $this->_dbIndex);				if ($result->getNumberOfRows()) {			$this->_displayName = $result->field("dr.display_name");			$this->_description = $result->field("dr.description");		}				// Create and Load the hierarchies			}		/**	 * Get the name for this DigitalRepository.	 * @return String the name	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function getDisplayName() { 		return $this->_drStore->getDisplayName();	}	/**	 * Update the name for this DigitalRepository.	 * @param displayName	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}, {@link DigitalRepositoryException#NULL_ARGUMENT NULL_ARGUMENT}	 * @package osid.dr	 */	function updateDisplayName($displayName) { 		$this->_drStore->updateDisplayName($displayName);	}	/**	 * Get the description for this DigitalRepository.	 * @return String the name	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function getDescription() {		return $this->_drStore->getDescription();	}	/**	 * Update the description for this DigitalRepository.	 * @param description	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}, {@link DigitalRepositoryException#NULL_ARGUMENT NULL_ARGUMENT}	 * @package osid.dr	 */	function updateDescription($description) { 		$this->_drStore->updateDescription($description);	}	/**	 * Get the Unique Id for this DigitalRepository.	 * @return osid.shared.Id Unique Id this is usually set by a create method's implementation	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function & getId() {		return $this->_drStore->getId();	}	/**	 * Get the the DigitalRepositoryType of this DigitalRepository.	 * @return osid.shared.Type	 * @throws osid.dr.DigitalRepositoryException An exception with one of the following messages defined in osid.dr.DigitalRepositoryException may be thrown: {@link DigitalRepositoryException#OPERATION_FAILED OPERATION_FAILED}, {@link DigitalRepositoryException#PERMISSION_DENIED PERMISSION_DENIED}, {@link DigitalRepositoryException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link DigitalRepositoryException#UNIMPLEMENTED UNIMPLEMENTED}	 * @package osid.dr	 */	function & getType() {		return $this->_drStore->getType();	}	/**	 * Saves this object to persistable storage.	 * @access protected	 */	function save () {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	 	/**	 * Loads this object from persistable storage.	 * @access protected	 */	function load () {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	?>