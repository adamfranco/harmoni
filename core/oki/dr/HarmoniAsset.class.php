<?require_once(HARMONI."/dr.interface.php");/** * Asset manages the Asset itself.  Assets have content as well as InfoRecords * appropriate to the AssetType and InfoStructures for the Asset.  Assets may * also contain other Assets. */class HarmoniAsset	extends HarmoniAssetInterface{ // begin Asset	/**	 * Get the display name for this Asset.	 *	 * @return String the display name	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function getDisplayName() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Update the display name for this Asset.	 *	 * @param String displayName	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function updateDisplayName($displayName) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get the description for this Asset.	 *	 * @return String the description	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function getDescription() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Update the description for this Asset.	 *	 * @param String description	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function updateDescription($description) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get the unique Id for this Asset.	 *	 * @return osid.shared.Id A unique Id that is usually set by a create	 *		 method's implementation	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getId() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get the DigitalRepository in which this Asset resides.  This is set by	 * the DigitalRepository's createAsset method.	 *	 * @return osid.shared.Id A unique Id that is usually set by a create	 *		 method's implementation digitalRepositoryId	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getDigitalRepository() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get an Asset's content.  This method can be a convenience if one is not	 * interested in all the structure of the InfoRecords.	 *	 * @return java.io.Serializable	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getContent() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Update an Asset's content.	 *	 * @param java.io.Serializable	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function updateContent(& $content) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Add an Asset to this Asset.	 *	 * @param osid.shared.Id assetId	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, UNKNOWN_ID, ALREADY_ADDED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function addAsset(& $assetId) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Remove an Asset to this Asset.  This method does not delete the Asset	 * from the DigitalRepository.	 *	 * @param osid.shared.Id assetId	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, UNKNOWN_ID 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function removeAsset(& $assetId, $includeChildren) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get all the Assets in this Asset.  Iterators return a set, one at a	 * time.  The Iterator's hasNext method returns true if there are	 * additional objects available; false otherwise.  The Iterator's next	 * method returns the next object.	 *	 * @return osid.dr.AssetIterator  The order of the objects returned by the	 *		 Iterator is not guaranteed.	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	/**	 * Get all the Assets of the specified AssetType in this DigitalRepository.	 * Iterators return a set, one at a time.  The Iterator's hasNext method	 * returns true if there are additional objects available; false	 * otherwise.  The Iterator's next method returns the next object.	 *	 * @return osid.dr.AssetIterator  The order of the objects returned by the	 *		 Iterator is not guaranteed.	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, UNKNOWN_TYPE 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getAssets() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Create a new Asset InfoRecord of the specified InfoStructure.   The	 * implementation of this method sets the Id for the new object.	 *	 * @param osid.shared.Id infoStructureId	 *	 * @return osid.dr.InfoRecord	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, UNKNOWN_ID 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & createInfoRecord(& $infoStructureId) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Add the specified InfoStructure and all the related InfoRecords from the	 * specified asset.  The current and future content of the specified	 * InfoRecord is synchronized automatically.	 *	 * @param osid.shared.Id assetId	 * @param osid.shared.Id infoStructureId	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, ALREADY_INHERITING_STRUCTURE 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function inheritInfoStructure(& $infoStructureId, & $assetId) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Add the specified InfoStructure and all the related InfoRecords from the	 * specified asset.	 *	 * @param osid.shared.Id assetId	 * @param osid.shared.Id infoStructureId	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function copyInfoStructure(& $infoStructureId, & $assetId) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Delete an InfoRecord.  If the specified InfoRecord has content that is	 * inherited by other InfoRecords, those	 *	 * @param osid.shared.Id infoRecordId	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, UNKNOWN_ID 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function deleteInfoRecord(& $infoRecordId) {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get all the InfoRecords for this Asset.  Iterators return a set, one at	 * a time.  The Iterator's hasNext method returns true if there are	 * additional objects available; false otherwise.  The Iterator's next	 * method returns the next object.	 *	 * @return osid.dr.InfoRecordIterator  The order of the objects returned by	 *		 the Iterator is not guaranteed.	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	/**	 * Get all the InfoRecords of the specified InfoStructure for this Asset.	 * Iterators return a set, one at a time.  The Iterator's hasNext method	 * returns true if there are additional objects available; false	 * otherwise.  The Iterator's next method returns the next object.	 *	 * @param osid.shared.Id infoStructureId	 *	 * @return osid.dr.InfoRecordIterator  The order of the objects returned by	 *		 the Iterator is not guaranteed.	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED, NULL_ARGUMENT, CANNOT_COPY_OR_INHERIT_SELF 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getInfoRecords() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Description_getAssetTypes=Get the AssetType of this Asset.  AssetTypes	 * are used to categorize Assets.	 *	 * @return osid.shared.Type	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getAssetType() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get all the InfoStructures for this Asset.  InfoStructures are used to	 * categorize information about Assets.  Iterators return a set, one at a	 * time.  The Iterator's hasNext method returns true if there are	 * additional objects available; false otherwise.  The Iterator's next	 * method returns the next object.	 *	 * @return osid.shared.TypeIterator The order of the objects returned by	 *		 the Iterator is not guaranteed.	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getInfoStructures() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Get the InfoStructure associated with this Asset's content.	 *	 * @return osid.dr.InfoStructure	 *	 * @throws An exception with one of the following messages defined in	 *		 osid.dr.DigitalRepositoryException may be thrown:	 *		 OPERATION_FAILED 	 *	 * @todo Replace JavaDoc with PHPDoc	 */	function & getContentInfoStructure() {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	/**	 * Saves this object to persistable storage.	 * @access protected	 */	function save () {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}	 	/**	 * Loads this object from persistable storage.	 * @access protected	 */	function load () {		die ("Method <b>".__FUNCTION__."()</b> declared in interface <b> ".__CLASS__."</b> has not been overloaded in a child class.");	}} // end Asset?>