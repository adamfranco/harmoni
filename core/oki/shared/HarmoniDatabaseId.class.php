<?require_once(OKI."/shared/sharedAPI.interface.php");class HarmoniDatabaseId	extends Id	// extends java.io.Serializable{ // begin Id	/**	 * @var string $_id The id of this id.	 */	 var $_id;		/**	 * @var integer $_databaseIndex The index of the database which holds this id.	 */	 var $_databaseIndex;		/**	 * Constructor. Creates a HarmoniId with id = $id or a new unique id if $id is NULL.	 * @param string $id The desired id. If NULL, a new unique id is used.	 *	 */	function HarmoniDatabaseId ( $databaseIndex, $id = NULL ) {		ArgumentValidator::validate($databaseIndex, new IntegerValidatorRule);		$this->_databaseIndex = $databaseIndex;				if ($id != NULL) {			// use this id			ArgumentValidator::validate($id, new IntegerValidatorRule);			$this->_id = $id;		} else {			// get a new unique id			$dbc =& Services::requireService("DBHandler","DBHandler");						// We will assume that the database specified by $databaseIndex has a table			// called "used_id" with a column called "id"			$query =& new InsertQuery;			$query->setTable("used_id");			$query->setAutoIncrementColumn("id", "id"); // Not sure if this is correct, need to test on Oracle						$result =& $dbc->query($query, $databaseIndex);						$this->_id = $result->getLastAutoIncrementValue();		}	}	// public String getIdString();	function getIdString() {		return $this->_id;	}	// public boolean isEqual(osid.shared.Id & $id);	function isEqual(& $id) {		return ($id->getIdString() == $this->_id)?true:false;	}} // end Id?>