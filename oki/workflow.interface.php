<?php
/**
 * @package osid.workflow
 */

/**
 * @ignore
 */
require_once(OKI."/osid.interface.php");

	/**
	 * WorkflowManager handles the management of Processes and the discovery of unfinished or completed work.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class WorkflowManager // :: API interface
	extends OsidManager
{

	/**
	 * Create a process.  An Unique Id is generated for this Process by the implementation.
	 * @param string displayName
	 * @param string description
	 * @return object Process
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function &createProcess($displayName, $description) { /* :: interface :: */ }
	// :: full java declaration :: Process createProcess(String displayName, String description)

	/**
	 * Copy a known Process and provide a new Display Name and Description.  A new Unique Id is generated by the implementation.  All elements of the original Process are included in the copy.
	 * @param object originalProcessId
	 * @param object newDisplayName
	 * @param object newDescription
	 * @return object Process
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &copyProcess(& $originalProcessId, $newDisplayName, $newDescription) { /* :: interface :: */ }
	// :: full java declaration :: Process copyProcess(osid.shared.Id originalProcessId, String newDisplayName, String newDescription)

	/**
	 * Delete a process by Unique Id.
	 * @param object processId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function deleteProcess(& $processId) { /* :: interface :: */ }
	// :: full java declaration :: void deleteProcess(osid.shared.Id processId)

	/**
	 * Get a Process by Unique Id.
	 * @param object processId
	 * @return object Process
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getProcess(& $processId) { /* :: interface :: */ }
	// :: full java declaration :: Process getProcess(osid.shared.Id processId)

	/**
	 * Get all known Processes.
	 * @return object ProcessIterator  Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getProcesses() { /* :: interface :: */ }
	// :: full java declaration :: ProcessIterator getProcesses()

	/**
	 * Get all the known Expressions.
	 * @return object ExpressionIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getExpressions() { /* :: interface :: */ }
	// :: full java declaration :: ExpressionIterator getExpressions()

	/**
	 * Get all the known Expressions of the specified Type.
	 * @param object expressionType
	 * @return object ExpressionIterator  Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_TYPE UNKNOWN_TYPE}
	 */
	function &getExpressionsByType(& $expressionType) { /* :: interface :: */ }
	// :: full java declaration :: ExpressionIterator getExpressionsByType(osid.shared.Type expressionType)

	/**
	 * Get all the work unfinished to be acted on by anyone.
	 * @param object processId
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getUnfinishedWork(& $processId) { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getUnfinishedWork(osid.shared.Id processId)

	/**
	 * Get the Work that has been completed for the specified Process.
	 * @param object processId
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getCompletedWork(& $processId) { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getCompletedWork(osid.shared.Id processId)

	/**
	 * Get all the output states for this Step.
	 * @return object osid.shared.StringIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getOutputStates() { /* :: interface :: */ }
	// :: full java declaration :: osid.shared.StringIterator getOutputStates()

	/**
	 * Get all the Expression Types supported by this implementation.
	 * @return object osid.shared.TypeIterator  Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getExpressionTypes() { /* :: interface :: */ }
	// :: full java declaration :: osid.shared.TypeIterator getExpressionTypes()
}


	/**
	 * Expression identifies an input condition that needs to be met before a Step can proceed.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class Expression // :: API interface
{

	/**
	 * Get the Type of this Expression.
	 * @return object osid.shared.Type
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getType() { /* :: interface :: */ }

	/**
	 * Get the DisplayName of this Expression.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDisplayName() { /* :: interface :: */ }
	// :: full java declaration :: String getDisplayName()

	/**
	 * Get the description of this Expression.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDescription() { /* :: interface :: */ }
}


	/**
	 * Step is a pivotal element in a Process. Processes are made up of Steps. A Step is composed of links to other Steps, and has InputConditions and OutputStates.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class Step // :: API interface
{

	/**
	 * Get the Unique Id for this Step.  The Unique Id is set when the Step is created by a Process.
	 * @return object osid.shared.Id
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getId() { /* :: interface :: */ }

	/**
	 * Get the DisplayName of this Step.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDisplayName() { /* :: interface :: */ }
	// :: full java declaration :: String getDisplayName()

	/**
	 * Update the DisplayName of this Step.
	 * @param string displayName
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function updateDisplayName($displayName) { /* :: interface :: */ }

	/**
	 * Get the description of this Step.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDescription() { /* :: interface :: */ }

	/**
	 * Get the description of this Step.
	 * @param string description
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function updateDescription($description) { /* :: interface :: */ }

	/**
	 * Get the Unique Id of the role associated with this Step.
	 * @return object osid.shared.Id
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getRoleId() { /* :: interface :: */ }

	/**
	 * Update the Unique Id of the role associate with this Step.
	 * @param object roleId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function updateRoleId(& $roleId) { /* :: interface :: */ }
	// :: full java declaration :: void updateRoleId( osid.shared.Id roleId )

	/**
	 * Returns true if this Step is the final one in the Process; false otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function isTerminal() { /* :: interface :: */ }
	// :: full java declaration :: boolean isTerminal()

	/**
	 * Returns true if this Step is the first one in the Process; false otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function isInitial() { /* :: interface :: */ }
	// :: full java declaration :: boolean isInitial()

	/**
	 * Get all the immediate predecessor Steps for this Step.
	 * @return object StepIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getPredecessors() { /* :: interface :: */ }
	// :: full java declaration :: StepIterator getPredecessors()

	/**
	 * Get all the immediate successor Steps for this Step from among those supported by the implementation.
	 * @return object StepIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getSuccessors() { /* :: interface :: */ }
	// :: full java declaration :: StepIterator getSuccessors()

	/**
	 * Get all the input conditions for this Step.
	 * @return object ExpressionIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getInputConditions() { /* :: interface :: */ }
	// :: full java declaration :: ExpressionIterator getInputConditions()

	/**
	 * Define the possible input conditions for this Step.
	 * @param object inputConditions
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_EXPRESSION UNKNOWN_EXPRESSION}
	 */
	function updateInputConditions(& $inputConditions) { /* :: interface :: */ }
	// :: full java declaration :: void updateInputConditions(Expression[] inputConditions)

	/**
	 * Define the possible output states for this Step from among those supported by the implementation.
	 * @param object outputStates
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_OUTPUT_STATE UNKNOWN_OUTPUT_STATE}
	 */
	function updateOutputStates(& $outputStates) { /* :: interface :: */ }
	// :: full java declaration :: void updateOutputStates(String[] outputStates)

	/**
	 * Get all the output states for this Step.
	 * @return object osid.shared.StringIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getOutputStates() { /* :: interface :: */ }
	// :: full java declaration :: osid.shared.StringIterator getOutputStates()

	/**
	 * Add a Step as an immediate predecessor of this Step.  A Step cannot be its own immediate predecessor, but looping is permitted.
	 * @param object stepId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}, {@link WorkflowException#INVALID_NETWORK INVALID_NETWORK}
	 */
	function addPredecessor(& $stepId) { /* :: interface :: */ }
	// :: full java declaration :: void addPredecessor(osid.shared.Id stepId)

	/**
	 * Remove a Step that is an immediate predecessor of this Step.
	 * @param object stepId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}, {@link WorkflowException#INVALID_NETWORK INVALID_NETWORK}
	 */
	function removePredecessor(& $stepId) { /* :: interface :: */ }
	// :: full java declaration :: void removePredecessor(osid.shared.Id stepId)
}


	/**
	 * Work is a set of Steps that are associated with one or more roles.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class Work // :: API interface
{

	/**
	 * Get the Unique Id for this Work.  The Unique Id is set when the Work is created by a Process.
	 * @return object osid.shared.Id
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getId() { /* :: interface :: */ }

	/**
	 * Get the DisplayName of this Work.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDisplayName() { /* :: interface :: */ }

	/**
	 * Update the DisplayName of this Work.
	 * @param string displayName
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function updateDisplayName($displayName) { /* :: interface :: */ }

	/**
	 * Get the description of this Work.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDescription() { /* :: interface :: */ }

	/**
	 * Get the description of this Work.
	 * @param string description
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function updateDescription($description) { /* :: interface :: */ }

	/**
	 * Get the Qualifier Unique Id that was set when this Work was created in a Process.
	 * @return object osid.shared.Id
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getQualifierId() { /* :: interface :: */ }

	/**
	 * Get the next Steps for a specific role this body of Work.
	 * @return object StepIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getNextStepsForRole(& $roleId) { /* :: interface :: */ }
	// :: full java declaration :: StepIterator getNextStepsForRole(osid.shared.Id roleId)

	/**
	 * Get the next Steps for any role for this body of Work.
	 * @return object StepIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getNextSteps() { /* :: interface :: */ }
	// :: full java declaration :: StepIterator getNextSteps()

	/**
	 * Update the OutputState for a Step in this body of Work.  The implementation will support a set of these Output States.  When a Step is designed, the appropriate subset of the possible Output States can be updated.  This method updates the Output State of this Step to one of those defined for the Step.
	 * @param object stepId
	 * @param object outputState
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}, {@link WorkflowException#UNKNOWN_OUTPUT_STATE UNKNOWN_OUTPUT_STATE}
	 */
	function updateStepOutputState(& $stepId, $outputState) { /* :: interface :: */ }
	// :: full java declaration :: void updateStepOutputState(osid.shared.Id stepId, String outputState)

	/**
	 * Get the series of Work Events that have occured in the context of this body of work.
	 * @return object WorkEventIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getHistory() { /* :: interface :: */ }
	// :: full java declaration :: WorkEventIterator getHistory()
}


	/**
	 * A Work Event is an output State for a Step that is associated with an Agent and point in time.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class WorkEvent // :: API interface
{

	/**
	 * Get when this Event happened.
	 * @return object java.util.Calendar
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getTimestamp() { /* :: interface :: */ }
	// :: full java declaration :: java.util.Calendar getTimestamp()

	/**
	 * Get the Unique Id of the Agent that performed this Event.
	 * @return object osid.shared.Id
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getAgentId() { /* :: interface :: */ }
	// :: full java declaration :: osid.shared.Id getAgentId()

	/**
	 * Get a Step by Unique Id.
	 * @return object Step
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getStep() { /* :: interface :: */ }
	// :: full java declaration :: Step getStep()

	/**
	 * Get the Output State for this Event.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getOutputState() { /* :: interface :: */ }
	// :: full java declaration :: String getOutputState()
}


	/**
	 * A Process is an organized set of Steps.  There is an initial Step.  There can be other Steps in the Process and they have a designated predecessor Step.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class Process // :: API interface
{

	/**
	 * Get the Unique Id for this Process.  The Unique Id is set when the Process is created by a Process.
	 * @return object osid.shared.Id
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getId() { /* :: interface :: */ }

	/**
	 * Get the DisplayName of this Process.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDisplayName() { /* :: interface :: */ }
	// :: full java declaration :: String getDisplayName()

	/**
	 * Update the DisplayName of this Process.
	 * @param string displayName
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function updateDisplayName($displayName) { /* :: interface :: */ }

	/**
	 * Get the description of this Process.
	 * @return object String
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getDescription() { /* :: interface :: */ }

	/**
	 * Get the description of this Process.
	 * @param string description
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}
	 */
	function updateDescription($description) { /* :: interface :: */ }

	/**
	 * Get the Type of this Process.
	 * @return object osid.shared.Type
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getType() { /* :: interface :: */ }

	/**
	 * Returns true if this Process is enabled; false otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function getEnabled() { /* :: interface :: */ }

	/**
	 * Updates the state of this Process: true if this Process is enabled; false otherwise.
	 * @param object enabled
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function updateEnabled($Enabled) { /* :: interface :: */ }

	/**
	 * Create an Inital Step for the specified role in this Process.  There must be one and only one Initial Step.
	 * @param string displayName
	 * @param string description
	 * @param object roleId
	 * @return object Step
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}, {@link WorkflowException#INVALID_NETWORK INVALID_NETWORK}
	 */
	function &createInitialStep($displayName, $description, & $roleId) { /* :: interface :: */ }
	// :: full java declaration :: Step createInitialStep(String displayName, String description, osid.shared.Id roleId)

	/**
	 * Create a Step with the specified Predecessor Step, for the specified role in this Process.  A Step cannot be its own immediate predecessor, but looping is permitted.
	 * @param object predecessorStepId
	 * @param string displayName
	 * @param string description
	 * @param object roleId
	 * @return object Step
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}, {@link WorkflowException#INVALID_NETWORK INVALID_NETWORK}
	 */
	function &createStep(& $predecessorStepId, $displayName, $description, & $roleId) { /* :: interface :: */ }
	// :: full java declaration :: Step createStep(osid.shared.Id predecessorStepId, String displayName, String description, osid.shared.Id roleId)

	/**
	 * Get a Step by Unique Id.
	 * @param object stepId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getStep(& $stepId) { /* :: interface :: */ }
	// :: full java declaration :: Step getStep(osid.shared.Id stepId)

	/**
	 * Get all the Steps in this Process.
	 * @return object StepIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getSteps() { /* :: interface :: */ }
	// :: full java declaration :: StepIterator getSteps()

	/**
	 * Delete a Step by Unique Id.
	 * @param object stepId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function deleteStep(& $stepId) { /* :: interface :: */ }
	// :: full java declaration :: void deleteStep(osid.shared.Id stepId)

	/**
	 * Create Work.  Work is not deleted.  When the Terminal Step is reached, Work is completed.
	 * @param string displayName
	 * @param string description
	 * @param object qualifierId
	 * @return object Work
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &createWork($displayName, $description, & $qualifierId) { /* :: interface :: */ }
	// :: full java declaration :: Work createWork(String displayName, String description, osid.shared.Id qualifierId)

	/**
	 * Delete Work.  Work is not deleted.  When the Terminal Step is reached, Work is completed.
	 * @param object workId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function deleteWork(& $workId) { /* :: interface :: */ }
	// :: full java declaration :: void deleteWork(osid.shared.Id workId)

	/**
	 * Get Work by Unique Id.
	 * @param object workId
	 * @return object Work
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getWork(& $workId) { /* :: interface :: */ }
	// :: full java declaration :: Work getWork(osid.shared.Id workId)

	/**
	 * Get all the Work.
	 * @return object WorkIterator
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getAllWork() { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getAllWork()

	/**
	 * Get all the work available to be acted on by the Owner.
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getAvailableWork() { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getAvailableWork()

	/**
	 * Get all the work available to be acted on by the Owner with this Role Unique Id.
	 * @param object roleId
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getAvailableWorkForRole(& $roleId) { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getAvailableWorkForRole(osid.shared.Id roleId)

	/**
	 * Get all the work available to be acted on by the Owner for this Step.
	 * @param object stepId
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getAvailableWorkForStep(& $stepId) { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getAvailableWorkForStep(osid.shared.Id stepId)

	/**
	 * Get all the work unfinished to be acted on by anyone.
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function &getUnfinishedWork() { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getUnfinishedWork()

	/**
	 * Get all the work unfinished to be acted on by anyone with this Role Unique Id.
	 * @param object roleId
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getUnfinishedWorkForRole(& $roleId) { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getUnfinishedWorkForRole(osid.shared.Id roleId)

	/**
	 * Get all the work unfinished to be acted on by anyone for this Step.
	 * @param object stepId
	 * @return object WorkIterator Iterators return a group of items, one item at a time.  The Iterator's hasNext method returns <code>true</code> if there are additional objects available; <code>false</code> otherwise.  The Iterator's next method returns the next object.
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function &getUnfinishedWorkForStep(& $stepId) { /* :: interface :: */ }
	// :: full java declaration :: WorkIterator getUnfinishedWorkForStep(osid.shared.Id stepId)

	/**
	 * Halt the specified Work.
	 * @param object workId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}
	 */
	function haltWork(& $workId) { /* :: interface :: */ }
	// :: full java declaration :: void haltWork(osid.shared.Id workId)

	/**
	 * Resume the specified halted Work.
	 * @param object workId
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NULL_ARGUMENT NULL_ARGUMENT}, {@link WorkflowException#UNKNOWN_ID UNKNOWN_ID}, {@link WorkflowException#NOT_HALTED NOT_HALTED}
	 */
	function resumeWork(& $workId) { /* :: interface :: */ }
	// :: full java declaration :: void resumeWork(osid.shared.Id workId)
}


	  /**
	 * ProcessIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	  */
class ProcessIterator // :: API interface
{

	/**
	 * Return <code>true</code> if there are additional  Processes; <code>false</code> otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function hasNext() { /* :: interface :: */ }
	// :: full java declaration :: boolean hasNext()

	/**
	 * Return the next Process.
	 * @return object Process
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
	 */
	function &next() { /* :: interface :: */ }
	// :: full java declaration :: Process next()
}


	/**
	 * StepIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.
	 * @package osid.workflow
	 */
class StepIterator // :: API interface
{

	/**
	 * Return <code>true</code> if there are additional  Steps; <code>false</code> otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function hasNext() { /* :: interface :: */ }
	// :: full java declaration :: boolean hasNext()

	/**
	 * Return the next Step.
	 * @return object Step
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
	 */
	function &next() { /* :: interface :: */ }
	// :: full java declaration :: Process next()
}


	/**
	 * WorkIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.
	 * @package osid.workflow
	 */
class WorkIterator // :: API interface
{

	/**
	 * Return <code>true</code> if there are additional  Work objects; <code>false</code> otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function hasNext() { /* :: interface :: */ }
	// :: full java declaration :: boolean hasNext()

	/**
	 * Return the next Work.
	 * @return object Work
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
	 */
	function &next() { /* :: interface :: */ }
	// :: full java declaration :: Process next()
}


	/**
	 * ExpressionIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.
	 * @package osid.workflow
	 */
class ExpressionIterator // :: API interface
{

	/**
	 * Return <code>true</code> if there are additional  Expressions; <code>false</code> otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function hasNext() { /* :: interface :: */ }
	// :: full java declaration :: boolean hasNext()

	/**
	 * Return the next Expression.
	 * @return object Expression
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
	 */
	function &next() { /* :: interface :: */ }
	// :: full java declaration :: Process next()
}


	/**
	 * WorkEventIterator provides access to these objects sequentially, one at a time.  The purpose of all Iterators is to to offer a way for OSID methods to return multiple values of a common type and not use an array.  Returning an array may not be appropriate if the number of values returned is large or is fetched remotely.  Iterators do not allow access to values by index, rather you must access values in sequence. Similarly, there is no way to go backwards through the sequence unless you place the values in a data structure, such as an array, that allows for access by index.
	 * @package osid.workflow
	 */
class WorkEventIterator // :: API interface
{

	/**
	 * Return <code>true</code> if there are additional  WorkEvents; <code>false</code> otherwise.
	 * @return object boolean
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}
	 */
	function hasNext() { /* :: interface :: */ }
	// :: full java declaration :: boolean hasNext()

	/**
	 * Return the next WorkEvent.
	 * @return object WorkEvent
	 * @throws osid.workflow.WorkflowException An exception with one of the following messages defined in osid.workflow.WorkflowException:   {@link WorkflowException#OPERATION_FAILED OPERATION_FAILED}, {@link WorkflowException#PERMISSION_DENIED PERMISSION_DENIED}, {@link WorkflowException#CONFIGURATION_ERROR CONFIGURATION_ERROR}, {@link WorkflowException#UNIMPLEMENTED UNIMPLEMENTED}, {@link WorkflowException#NO_MORE_ITERATOR_ELEMENTS NO_MORE_ITERATOR_ELEMENTS}
	 */
	function &next() { /* :: interface :: */ }
	// :: full java declaration :: Process next()
}


	/**
	 * All methods of all interfaces of the Open Service Interface Definition (OSID) throw a subclass of osid.OsidException. This requires the caller of an osid package method handle the OsidException. Since the application using an OsidManager can not determine where the implementation will ultimately execute, it must assume a worst case scenario and protect itself.<p>SID Version: 1.0 rc6<p>Licensed under the {@link SidLicense MIT O.K.I&#46; SID Definition License}.
	 * @package osid.workflow
	 */
class WorkflowException // :: normal class
	extends OsidException
{

	/**
	 * Unknown Id
	 */
	// :: defined globally :: define("UNKNOWN_ID","Unknown Id ");

	/**
	 * Unknown or unsupported Type
	 */
	// :: defined globally :: define("UNKNOWN_TYPE","Unknown Type ");

	/**
	 * Operation failed
	 */
	// :: defined globally :: define("OPERATION_FAILED","Operation failed ");

	/**
	 * Iterator has no more elements
	 */
	// :: defined globally :: define("NO_MORE_ITERATOR_ELEMENTS","Iterator has no more elements ");

	/**
	 * Circular operation
	 */
	// :: defined globally :: define("CIRCULAR_OPERATION","Circular operation not allowed ");

	/**
	 * Null argument
	 */
	// :: defined globally :: define("NULL_ARGUMENT","Null argument ");

	/**
	 * Permission denied
	 */
	// :: defined globally :: define("PERMISSION_DENIED","Permission denied ");

	/**
	 * Object already added
	 */
	// :: defined globally :: define("ALREADY_ADDED","Object already added ");

	/**
	 * Configuration error
	 */
	// :: defined globally :: define("CONFIGURATION_ERROR","Configuration error ");

	/**
	 * Unimplemented method
	 */
	// :: defined globally :: define("UNIMPLEMENTED","Unimplemented method ");

	/**
	 * Unknown Expression
	 */
	// :: defined globally :: define("UNKNOWN_EXPRESSION","Unknown Expression ");

	/**
	 * Unknown Output State
	 */
	// :: defined globally :: define("UNKNOWN_OUTPUT_STATE","Unknown Output State ");

	/**
	 * Invalid network
	 */
	// :: defined globally :: define("INVALID_NETWORK","Invalid network ");

	/**
	 * Work is not halted
	 */
	// :: defined globally :: define("NOT_HALTED","Work is not halted ");
}

// :: post-declaration code ::
/**
 * string: Unknown Id 
 * @name UNKNOWN_ID
 */
define("UNKNOWN_ID", "Unknown Id ");

/**
 * string: Unknown Type 
 * @name UNKNOWN_TYPE
 */
define("UNKNOWN_TYPE", "Unknown Type ");

/**
 * string: Operation failed 
 * @name OPERATION_FAILED
 */
define("OPERATION_FAILED", "Operation failed ");

/**
 * string: Iterator has no more elements 
 * @name NO_MORE_ITERATOR_ELEMENTS
 */
define("NO_MORE_ITERATOR_ELEMENTS", "Iterator has no more elements ");

/**
 * string: Circular operation not allowed 
 * @name CIRCULAR_OPERATION
 */
define("CIRCULAR_OPERATION", "Circular operation not allowed ");

/**
 * string: Null argument 
 * @name NULL_ARGUMENT
 */
define("NULL_ARGUMENT", "Null argument ");

/**
 * string: Permission denied 
 * @name PERMISSION_DENIED
 */
define("PERMISSION_DENIED", "Permission denied ");

/**
 * string: Object already added 
 * @name ALREADY_ADDED
 */
define("ALREADY_ADDED", "Object already added ");

/**
 * string: Configuration error 
 * @name CONFIGURATION_ERROR
 */
define("CONFIGURATION_ERROR", "Configuration error ");

/**
 * string: Unimplemented method 
 * @name UNIMPLEMENTED
 */
define("UNIMPLEMENTED", "Unimplemented method ");

/**
 * string: Unknown Expression 
 * @name UNKNOWN_EXPRESSION
 */
define("UNKNOWN_EXPRESSION", "Unknown Expression ");

/**
 * string: Unknown Output State 
 * @name UNKNOWN_OUTPUT_STATE
 */
define("UNKNOWN_OUTPUT_STATE", "Unknown Output State ");

/**
 * string: Invalid network 
 * @name INVALID_NETWORK
 */
define("INVALID_NETWORK", "Invalid network ");

/**
 * string: Work is not halted 
 * @name NOT_HALTED
 */
define("NOT_HALTED", "Work is not halted ");

?>
