<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter SYSTEM "../dtds/chapter.dtd"> 
<!-- this contains a chapter of the Harmoni manual -->

<chapter>
	<version>$Id: 02-Getting\040Started.xml,v 1.2 2003/08/25 20:22:19 adamfranco Exp $</version>
	<name>Getting Started</name>
	<p>This chapter gives you a quick-start guide to Harmoni. It will concentrate on the most common required services: Authentication and Database Connectivity, as well as usage of the architecture.</p>
	<section>
		<name>The Harmoni directory structure</name>
		<p>Here is a run-down of what's in Harmoni:</p>
		
		<termdef><term>harmoni/</term><def>The root Harmoni directory. Contains the "harmoni.inc.php" file which must be included by any script using Harmoni.</def></termdef>
		<termdef><term>harmoni/docs/</term><def>The documentation directory, containing the manual, various READMEs, the PHPDoc, License, etc.</def></termdef>
		<termdef><term>harmoni/core/</term><def>Contains all the Harmoni core class files. Feel free to muck around. Changing things may mess things up, though.</def></termdef>
		<termdef><term>harmoni/config/</term><def>Harmoni user-configuration files. Edit these!</def></termdef>
		<termdef><term>harmoni/changelog/</term><def>Contains the changelog in XML, TXT and HTML formats.</def></termdef>
		<termdef><term>harmoni/oki/</term><def>Contains all the OKI OSIDs. These are interfaces you should follow when creating classes for functions underneath the OKI umbrella.</def></termdef>
		
	</section>
	
	<section>
		<name>Making your application run "under" Harmoni</name>
		<p>Get ready, this is hard. And by hard, I really mean easy. Take a look at this code:</p>
		<example><file>02-IncludeHarmoni.php.ex</file></example>
		<p>Break it down: the <b>require_once(...)</b> is pretty much it. You include that, before most everything else, in a file called <i>index.php</i> or <i>default.php</i> or whatever you want, really. Once that file is included, all of Harmoni's required classes are included and services are instantiated and configured.</p>

		<p>Now, as much as you could claim that your program runs under Harmoni just by using this file, you might also want to take advantage of the functionality it provides.</p>
	</section>
		
	<section>
		<name>Quick Services Introduction</name>
		<p>This section will provide a quick introduction into how Harmoni services can be created, started, stopped and used. For information on specific services that are packaged Harmoni, there is a chapter devoted to just that. This is not it.</p>
		<p>Services are, in essence, special PHP classes. They are meant to hover over the execution of your code and pop down whenever you request them to impart their divine knowledge upon you. An example: The ErrorHandler. Any time something bad happens, you throw an error. The error handler picks it up and waits until later to print them out (at your discretion). If the error is fatal, well, it kills your program and tells the end user everything that happened (try it - it's fun). 
		</p>
		
		<p>Harmoni provides a special class called <i>Services</i> which can be used statically. That means that it's available in any scope in your program, and hence your program has access to ALL services registered in ANY scope of your program. For those of you that have a little sense, you organize your code into functions, and maybe even classes and class-methods. No matter where you are, though, you can access the Services class! Amazing! Here's how:</p>

		<example><file>02-GetService.php.ex</file></example>
		
		<p>You can also start a service with <b>Services::startService("SomeName")</b> or stop it with <b>Services::stopService("SomeName")</b>. More useful is the requireService function:</p>

		<example><file>02-RequireService.php.ex</file></example>
		
		<p>The above function will check if a Service exists. If it does not, it will complain. Loudly. An optional second argument (true/false - default=true) tells the function to start the Service if it is not already, and return the Service object to you. If the second argument is FALSE, it will do nothing other than make sure the Service has been registered.</p>

		<note>Make sure that when you work with objects under PHP4 that you use the <i>assign by reference</i> operator ("=&amp;") instead of a normal <i>assign</i> ("="). PHP4 has an annoying way of assuming that you want a <b>copy</b> of an object by default. For the most part, this is pointless. If you were to get a service by copy, make changes to it, and expect those changes to be reflected later in your code when something else gets the service, you will be pleasantly surprised (and annoyed). So, any time that you are expecting an object back from a function, use <b>=&amp;</b>. </note>
		
		<p>More detail on Services and the more advanced functions can be found later.</p>
	</section>
	
	<subchapter>
		<name>Authentication &amp; DBC</name>
		<section>
			<name>Introduction to Authentication</name>
			<p>Although it's a nice gesture to open your programs to all internet users, sometimes it isn't exactly what you, or your users, are looking for. Authentication is in essence the process of finding out that the person sitting behind the computer terminal is indeed, who they claim to be. The most common form of internet authentication is <i>username/password</i> pair authentication. For this guide, we will use this type. Other types include: SSL-certificate, SSH keys, retinal scanning (not so common on the internet), and so on.</p>
			<p>Once you've chosen an authentication type (<i>username/password</i>), there are multiple ways in which your program can come across this information. One common method is to store the username and an ecrypted version of the password in an SQL database, or in a file on the filesystem. For our example, we are going to store this information in a database. Further, one program might access multiple authentication methods for any given type; you may get "authoritative" users from one local database, faculty/staff from a central institution database, remote users from another institution's database, etc. For most users, limiting authentication to one source is enough. For larger enterprise-level applications, authenticating on multiple sources can be very useful; program logic may change depending on where the end user is, or what institution they are from. It could be as simple as changing the banner logo to one they can relate to (but come on people, use your imagination!). </p>
		</section>
		
		<section>
			<name>Simple Database Authentication</name>

			<p>Harmoni has a service registered under the name "Authentication". This service is an instatiation of the <i>AuthenticationHandler</i> class. See the PHPDoc for details. The AuthenticationHandler is essentially an organizer of <i>AuthenticationMethod</i>s. A single <i>AuthenticationMethod</i> can access a database, an LDAP server, a flat file, an IMAP server, etc. The Handler can keep track of as many of these as you'd like. For this example, we will add only one Method to the Handler. The following code sets up the AuthenticationHandler to check a user's username and password against two fields in a database.</p>

			<example><file>02-SimpleAuth.php.ex</file></example>

			<p>Somewhere later in your code, you could include something like:</p>

			<example><file>02-SimpleAuth2.php.ex</file></example>
			
			<p>The above code contacts the database "my.host.com", looks for the "myAppDB" database, and checks, within the table "users", for the two fields "users_username" and "users_password". The <i>DBAuthenticationMethod</i> assumes that the database holds passwords that were encrypted using its own MD5() function. Assuming that $someUser and $somePass were given by an end user, you smart people can figure out how this is useful.</p>
			
			<note>In order to avoid users entering their password every page load, you need to authenticate them and then store their credentials in some secure fashion. Unfortunately, this opens up your system to unwanted users. For this purpose, the Harmoni framework offers the LoginHandler. It will both store user credentials through a session, but also (optionally) use a database for secure hash generation, which makes it close to impossible for a hacker to fake a valid login.</note>
		</section>

		<section>
			<name>Simple Database Access</name>
			<p>The Harmoni database wrapper, handled by the <i>DBHandler</i> class, provides access to SQL databases. Supported databases include: MySQL, PostgreSQL, Oracle, Microsoft SQL Server, and through OKI's SQL OSID, which, as of the time of this writing, is not yet complete.</p>
			
			<p>You might wonder (if you've looked at some code or the PHPDoc) why using such a seemingly round-about approach to database access is useful. For those of you that aim to connect to only one specific type of database, these wrappers may not be so useful. However, in order to target the largest audience in the internet community, it is important to keep in mind that people are different; specifically, some use MySQL, some PostgreSQL, and so on. The Harmoni <i>DBHandler</i> allows you to use <b>identical</b> PHP code to <i>select</i>, <i>insert</i>, <i>update</i> and <i>delete</i> rows from databases, even if they are of different kinds. This way, no matter if the person that downloads your program uses Oracle or MySQL, your code WILL WORK.</p>

			<p>So, without further ado, let's look at some simple database access scripts.</p>

			<heading>Connecting/Disconnecting</heading>
			
			<example><file>02-DB-Connect.php.ex</file></example>
			
			<p>The above code does nothing more than connect to a Postgres database and then disconnect. Amazing.</p>
			
			<heading>Select Query</heading>
			
			<p>Now, let's fetch some data from a table named "table1".</p>
			
			<example><file>02-DB-Select.php.ex</file></example>
			
			<p>The above might output something like:</p>
			
			<block>
Our query has 3 rows!
Result row: column1 = jones, anAlias = fred
Result row: column1 = jones, anAlias = george
Result row: column1 = jones, anAlias = franky
			</block>
			
			<p>The SQL query could look something like:</p>
			
			<block>
SELECT column1, column2 AS anAlias
		FROM table1
		WHERE column1 = 'jones'
			</block>

			<p>This is a very simple example. The SelectQuery can do a whole lot more. Take a look at the PHPDoc or later chapters for more information.</p>
			
			<heading>Insert Query</heading>
			
			<example><file>02-DB-Insert.php.ex</file></example>
			
			<p>Under MySQL, the query would look like:</p>
			
			<block>
INSERT
	INTO table1
	(column1, column2)
	VALUES ("jones", "margy")
	VALUES ("jameson", "bobby")
			</block>
			
			<heading>Update Query</heading>
			
			<example><file>02-DB-Update.php.ex</file></example>
			
			<p>The "jones" family just changed their last name to "yodle". Don't ask me. Here's the query under MySQL:</p>
			
			<block>
UPDATE
	table1
	SET column1 = "yodle"
	WHERE column1 = "jones"
			</block>
			
			<heading>Delete Query</heading>
			
			<example><file>02-DB-Delete.php.ex</file></example>
			
			<p>Bad new... the "yodle" family just choked. Away they go. Here's the SQL:</p>
			
			<block>
DELETE
	FROM table1
	WHERE column1 = "yodle"
			</block>
			
			<p>So, now you know how to do the basics and essentials to use databases. And no more writing SQL for you SQL-phobic folks out there!</p>
		</section>
	</subchapter>
</chapter>







